/*
 * Copyright (c) 2021 Kyle McCreery
 *
 * SPDX-License-Identifier: MIT
 */
#define ZMK_BASE_LAYER(name, LT, RT, LM, RM, LB, RB, LH, RH)                   \
    ZMK_LAYER(                                                                 \
        name,                                                                  \
                             LT &none &none RT                                 \
                             LM &none &none RM                                 \
                             LB &none &none RB                                 \
        &none &none &kp LGUI LH &none &none RH &smart_mouse U_WH_D U_WH_U      \
    )


#include "base.keymap"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

ZMK_LEADER_SEQUENCE(pw1,      &pw1,         KP_N1 KP_N2)  // Ã¤

#define TIMEOUT 300

#define LEFT_HYPER LS(LC(LA(LGUI)))
#define LH(key) LS(LC(LA(LG(key))))

&encoder_1 {
    status = "okay";
};

/* Combo Definitions*/
/ {
    combos {
        compatible = "zmk,combos";
        combo_btclr {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 6>;
            bindings = <&bt BT_CLR>;
        };
        combo_reset {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 3>;
            bindings = <&sys_reset>;
        };
        combo_bootloader {
            timeout-ms = <TIMEOUT>;
            key-positions = <0 3>;
            bindings = <&bootloader>;
        };
        combo_bt_nxt {
            timeout-ms = <TIMEOUT>;
            key-positions = <1 4>;
            bindings = <&bt BT_NXT>;
        };
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&encoder_1>;
    };


    keymap0: keymap {
        compatible = "zmk,keymap";

        default_layer {
        label = "numpad";
            bindings = <
                            &kp ESC      &leader          &kp KP_EQUAL      &kp BSPC
                            &kp UP       &kp DOWN        &kp LEFT          &kp RIGHT
                            &kp KP_N7    &kp KP_N8       &kp KP_N9         &kp KP_DIVIDE
                &kp LH(Q)   &kp KP_N4    &kp KP_N5       &kp KP_N6         &kp KP_MULTIPLY
                &tog FN     &kp KP_N1    &kp KP_N2       &kp KP_N3         &kp KP_MINUS
                &kp BSPC    &kp KP_N0    &kp KP_DOT      &kp KP_ENTER      &kp KP_PLUS
            >;
            sensor-bindings = <&inc_dec_kp LH(K) LH(J)>;

        };

        fn_layer {
        label = "rgb";
            bindings = <
                                &out OUT_TOG     &bt BT_PRV       &bt BT_NXT       &trans
                                &trans           &trans           &trans           &trans
                                &rgb_ug RGB_HUD  &rgb_ug RGB_SPI  &rgb_ug RGB_HUI  &trans
                &bt BT_CLR_ALL  &rgb_ug RGB_EFR  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &trans
                &trans          &kp LH(J)  &rgb_ug RGB_SPD  &rgb_ug RGB_BRI  &trans
                &kp DEL         &kp LEFT_HYPER  &kp KP_COMMA     &rgb_ug RGB_SAI  &trans
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;

        };
    };
};
